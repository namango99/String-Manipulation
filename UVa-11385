import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

class Main {

	public static class Pair implements Comparable<Pair>{
		int number;
		int character;
		Pair(int number ,char character){
			this.character=character;
			this.number=number;
		}
		public int compareTo(Pair x) {
			return this.number-x.number;
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		out=new PrintWriter (new BufferedOutputStream(System.out));
		FastReader s=new FastReader();
		int t=s.nextInt();
		ArrayList<Integer> arr=new ArrayList<Integer>();
		arr.add(1);
		arr.add(2);
		int current = 0;
		while(current<(int)1e9) {
			current = arr.get(arr.size()-1)+arr.get(arr.size()-2);
			arr.add(current);
		}
		while(t-->0) {
			int n=s.nextInt();
			int[] arr1=new int[n];
			for(int i=0;i<n;i++)arr1[i]=s.nextInt();
			String str=s.nextLine();
			str=str.replaceAll("[^A-Z]", "");
			Pair[] finalarr=new Pair[n];
			for(int i=0;i<n;i++) {
				finalarr[i]=new Pair(arr1[i],str.charAt(i));
			}
			Arrays.sort(finalarr);
			int point=0;
			StringBuilder ans=new StringBuilder();
			for(int i=0;i<n;i++) {
				if(finalarr[i].number==arr.get(point)) {
					ans.append((char)finalarr[i].character);
					point++;
				}else {
					i--;
					ans.append(" ");
					point++;
				}
			}
			out.println(ans);
		}
		out.close();
	}

	public static PrintWriter out;
	
	public static class FastReader {
		BufferedReader br;
		StringTokenizer st;
		//it reads the data about the specified point and divide the data about it ,it is quite fast
		//than using direct 

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
			//InputStream reads the data and decodes in character stream
			//It acts as bridge between byte stream and character stream
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());//converts string to integer
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return str;
		}
	}
	
}
